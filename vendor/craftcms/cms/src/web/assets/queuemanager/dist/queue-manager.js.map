{"version":3,"file":"queue-manager.js","mappings":"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","sources":["webpack:///./queue-manager.js"],"sourcesContent":["/**\n * @link https://craftcms.com/\n * @copyright Copyright (c) Pixel & Tonic, Inc.\n * @license https://craftcms.github.io/license/\n */\n\n/**\n * Vue component for the Queue manager\n *\n * @author Pixel & Tonic, Inc. <support@pixelandtonic.com>\n * @author Global Network Group | Giel Tettelaar <giel@yellowflash.net>\n * @since 3.2.0\n */\nnew Vue({\n    el: \"#main\",\n    delimiters: ['[[', ']]'],\n    data() {\n        return {\n            loading: false,\n            indexTimeout: null,\n            jobs: [],\n            totalJobs: null,\n            totalJobsFormatted: null,\n            activeJobId: null,\n            activeJob: null,\n            limit: 50\n        }\n    },\n\n    /**\n     * Mounted function\n     */\n    mounted() {\n        document.getElementById('queue-manager-utility').removeAttribute('class')\n\n        Craft.cp.on('setJobInfo', () => {\n            this.jobs = Craft.cp.jobInfo.slice(0)\n            this.totalJobs = Craft.cp.totalJobs\n            this.totalJobsFormatted = Craft.formatNumber(this.totalJobs)\n            if (!this.loading) {\n                this.refreshActiveJob()\n            }\n        })\n\n        window.onpopstate = (event) => {\n            if (event.state && event.state.jobId) {\n                this.setActiveJob(event.state.jobId, false)\n            } else {\n                this.clearActiveJob(false)\n            }\n        }\n\n        // Was a specific job requested?\n        let m = Craft.path.match(/utilities\\/queue-manager\\/([^\\/]+)/)\n        if (m) {\n            let jobId = m[1]\n            history.replaceState({jobId}, '', this.url(jobId))\n            this.setActiveJob(jobId, false)\n        }\n    },\n\n    methods: {\n        /**\n         * Force-updates the job progress.\n         */\n        updateJobProgress() {\n            Craft.cp.trackJobProgress(false, true)\n        },\n\n        /**\n         * Sets the active job that should be shown.\n         * @param {string} jobId\n         * @param {boolean} pushState\n         * @return {Promise}\n         */\n        setActiveJob(jobId, pushState) {\n            return new Promise((resolve, reject) => {\n                window.clearTimeout(this.indexTimeout)\n                this.loading = true\n                this.activeJobId = jobId\n\n                if (pushState) {\n                    history.pushState({jobId}, '', this.url(jobId))\n                }\n\n                axios.get(Craft.getActionUrl('queue/get-job-details?id=' + jobId + '', {})).then(response => {\n                    if (response.data.id != this.activeJobId) {\n                        resolve(false)\n                        return\n                    }\n                    this.activeJob = response.data\n                    this.loading = false\n                    resolve(true)\n                }, response => {\n                    Craft.cp.displayError(response.response.data.error)\n                    reject(response)\n                })\n            })\n        },\n\n        /**\n         * Refreshes the active job\n         * @return {Promise}\n         */\n        refreshActiveJob() {\n            return new Promise((resolve, reject) => {\n                if (!this.activeJobId) {\n                    resolve(false)\n                    return\n                }\n                let oldJob = this.activeJob\n                this.setActiveJob(this.activeJobId, false).then((success) => {\n                    // If it's done now, the response is probably missing critical info about the job\n                    if (success && oldJob && this.activeJob.status == 3) {\n                        $.extend(oldJob, {\n                            progress: 100,\n                            status: 3,\n                        })\n                        delete oldJob.error\n                        delete oldJob.progressLabel\n                        this.activeJob = oldJob\n                    }\n                    resolve(success)\n                }).catch(reject)\n            })\n        },\n\n        /**\n         * Retries all jobs.\n         * @return {Promise}\n         */\n        retryAll() {\n            return new Promise((resolve, reject) => {\n                window.clearTimeout(this.indexTimeout)\n                this.postActionRequest('queue/retry-all').then(response => {\n                    Craft.cp.displayNotice(Craft.t('app', 'Retrying all failed jobs.'))\n                    this.updateJobProgress()\n                    resolve()\n                }).catch(reject)\n            })\n        },\n\n        /**\n         * Releases all jobs.\n         * @return {Promise}\n         */\n        releaseAll() {\n            return new Promise((resolve, reject) => {\n                if (!confirm(Craft.t('app', 'Are you sure you want to release all jobs in the queue?'))) {\n                    resolve(false)\n                    return\n                }\n\n                this.postActionRequest('queue/release-all').then(response => {\n                    Craft.cp.displayNotice(Craft.t('app', 'All jobs released.'))\n                    this.clearActiveJob(true)\n                    this.updateJobProgress()\n                    resolve(true)\n                }).catch(reject)\n            })\n        },\n\n        /**\n         * Retries a specific job.\n         * @param {Object} job\n         * @return {Promise}\n         */\n        retryJob(job) {\n            return new Promise((resolve, reject) => {\n                // Only confirm if the job is currently reserved\n                if (job.status == 2) {\n                    let message = Craft.t('app', 'Are you sure you want to restart the job “{description}”? Any progress could be lost.', {\n                        description: job.description\n                    })\n                    if (!confirm(message)) {\n                        resolve(false)\n                        return\n                    }\n                }\n\n                window.clearTimeout(this.indexTimeout)\n\n                this.postActionRequest('queue/retry', {id: job.id}).then(response => {\n                    if (job.status == 2) {\n                        Craft.cp.displayNotice(Craft.t('app', 'Job restarted.'))\n                    } else {\n                        Craft.cp.displayNotice(Craft.t('app', 'Job retried.'))\n                    }\n\n                    this.updateJobProgress()\n                    resolve(true)\n                }).catch(reject)\n            })\n        },\n\n        /**\n         * Retries the active job.\n         * @return {Promise}\n         */\n        retryActiveJob() {\n            return new Promise((resolve, reject) => {\n                this.retryJob(this.activeJob).then(resolve).catch(reject)\n            })\n        },\n\n        /**\n         * Releases a job.\n         * @param {Object} job\n         * @returns {Promise}\n         */\n        releaseJob(job) {\n            return new Promise((resolve, reject) => {\n                let message = Craft.t('app', 'Are you sure you want to release the job “{description}”?', {\n                    description: job.description\n                })\n                if (!confirm(message)) {\n                    resolve(false)\n                    return\n                }\n                this.postActionRequest('queue/release', {id: job.id}).then(response => {\n                    Craft.cp.displayNotice(Craft.t('app', 'Job released.'))\n                    this.updateJobProgress()\n                    resolve(true)\n                })\n            })\n        },\n\n        /**\n         * Releases the active job.\n         * @returns {Promise}\n         */\n        releaseActiveJob() {\n            return new Promise((resolve, reject) => {\n                this.releaseJob(this.activeJob).then((released) => {\n                    if (released) {\n                        this.clearActiveJob(true)\n                    }\n                    resolve(released)\n                }).catch(reject)\n            })\n        },\n\n        /**\n         * Resets an active job so that the index screen is displayed.\n         * @param {boolean} pushState\n         */\n        clearActiveJob(pushState) {\n            if (!this.activeJob) {\n                return\n            }\n\n            this.activeJob = null\n            this.activeJobId = null\n\n            if (pushState) {\n                history.pushState({}, '', this.url())\n            }\n        },\n\n        /**\n         * Returns a Queue Manager URL.\n         * @param {string|null} jobId\n         * @returns {string}\n         */\n        url(jobId) {\n            return Craft.getUrl('utilities/queue-manager' + (jobId ? '/' + jobId : ''))\n        },\n\n        /**\n         * Returns whether a job can be retried.\n         * @param {Object} job\n         * @returns {boolean}\n         */\n        isRetryable(job) {\n            return job.status == 2 || job.status == 4\n        },\n\n        /**\n         * Returns the class name a job's status cell should have.\n         * @param {number} status\n         * @returns {string}\n         */\n        jobStatusClass(status) {\n            if (status == 4) {\n                return 'error'\n            }\n            return ''\n        },\n\n        /**\n         * Returns a job status code.\n         * @param {number} status\n         * @param {number} delay\n         * @returns {string}\n         */\n        jobStatusLabel(status, delay) {\n            if (delay) {\n                return Craft.t('app', 'Delayed')\n            }\n\n            switch (status) {\n                case 1:\n                    return Craft.t('app', 'Pending')\n                    break\n                case 2:\n                    return Craft.t('app', 'Reserved')\n                    break\n                case 3:\n                    return Craft.t('app', 'Finished')\n                    break\n                case 4:\n                    return Craft.t('app', 'Failed')\n                    break\n                default:\n                    return ''\n            }\n        },\n\n        /**\n         * Returns a job status icon class.\n         * @param {number} status\n         * @returns {string}\n         */\n        jobStatusIconClass(status) {\n            let c = 'status'\n            switch (status) {\n                case 1:\n                    c += ' orange'\n                    break\n                case 2:\n                    c += ' green'\n                    break\n                case 4:\n                    c += ' red'\n                    break\n            }\n            return c\n        },\n\n        /**\n         * Returns a job attribute name.\n         * @param {string} name\n         * @returns {string}\n         */\n        jobAttributeName(name) {\n            switch (name) {\n                case 'id':\n                    return Craft.t('app', 'ID')\n                case 'status':\n                    return Craft.t('app', 'Status')\n                case 'progress':\n                    return Craft.t('app', 'Progress')\n                case 'description':\n                    return Craft.t('app', 'Description')\n                case 'ttr':\n                    return Craft.t('app', 'Time to reserve')\n                case 'error':\n                    return Craft.t('app', 'Error')\n                default:\n                    return name\n            }\n        },\n\n        /**\n         * Formats a TTR value.\n         * @param {string} value\n         * @return {string}\n         */\n        ttrValue(value) {\n            return Craft.t('app', '{num, number} {num, plural, =1{second} other{seconds}}', {\n                num: value\n            })\n        },\n\n        /**\n         * Promise wrapper for `Craft.postActionRequest()`.\n         * @param {string} action\n         * @param {Object} params\n         * @returns {Promise}\n         */\n        postActionRequest(action, params) {\n            return new Promise((resolve, reject) => {\n                Craft.postActionRequest(action, params, (response, textStatus) => {\n                    if (textStatus !== 'success') {\n                        reject()\n                        return\n                    }\n                    resolve(response)\n                })\n            })\n        }\n    }\n})\n"],"names":["Vue","el","delimiters","data","loading","indexTimeout","jobs","totalJobs","totalJobsFormatted","activeJobId","activeJob","limit","mounted","document","getElementById","removeAttribute","Craft","cp","on","jobInfo","slice","formatNumber","refreshActiveJob","window","onpopstate","event","state","jobId","setActiveJob","clearActiveJob","m","path","match","history","replaceState","this","url","methods","updateJobProgress","trackJobProgress","pushState","Promise","resolve","reject","clearTimeout","axios","get","getActionUrl","then","response","id","displayError","error","oldJob","success","status","$","extend","progress","progressLabel","retryAll","postActionRequest","displayNotice","t","releaseAll","confirm","retryJob","job","message","description","retryActiveJob","releaseJob","releaseActiveJob","released","getUrl","isRetryable","jobStatusClass","jobStatusLabel","delay","jobStatusIconClass","c","jobAttributeName","name","ttrValue","value","num","action","params","textStatus"],"sourceRoot":""}