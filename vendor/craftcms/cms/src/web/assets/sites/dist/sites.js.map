{"version":3,"file":"sites.js","mappings":"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","sources":["webpack:///./sites.js"],"sourcesContent":["(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    Craft.SitesAdmin = Garnish.Base.extend({\n        $groups: null,\n        $selectedGroup: null,\n\n        init: function() {\n            this.$groups = $('#groups');\n            this.$selectedGroup = this.$groups.find('a.sel:first');\n            this.addListener($('#newgroupbtn'), 'activate', 'addNewGroup');\n\n            var $groupSettingsBtn = $('#groupsettingsbtn');\n\n            if ($groupSettingsBtn.length) {\n                var menuBtn = $groupSettingsBtn.data('menubtn');\n\n                menuBtn.settings.onOptionSelect = elem => {\n                    var $elem = $(elem);\n\n                    if ($elem.hasClass('disabled')) {\n                        return;\n                    }\n\n                    switch ($elem.data('action')) {\n                        case 'rename': {\n                            this.renameSelectedGroup();\n                            break;\n                        }\n                        case 'delete': {\n                            this.deleteSelectedGroup();\n                            break;\n                        }\n                    }\n                };\n            }\n        },\n\n        addNewGroup: function() {\n            this.promptForGroupName('').then(name => {\n                if (!name) {\n                    return;\n                }\n\n                let data = {\n                    name: name\n                };\n\n                Craft.postActionRequest('sites/save-group', data, (response, textStatus) => {\n                    if (textStatus === 'success') {\n                        if (response.success) {\n                            location.href = Craft.getUrl('settings/sites', {groupId: response.group.id});\n                        } else if (response.errors) {\n                            var errors = this.flattenErrors(response.errors);\n                            alert(Craft.t('app', 'Could not create the group:') + \"\\n\\n\" + errors.join(\"\\n\"));\n                        } else {\n                            Craft.cp.displayError();\n                        }\n                    }\n                });\n            }).catch(() => {});\n        },\n\n        renameSelectedGroup: function() {\n            this.promptForGroupName(this.$selectedGroup.data('raw-name')).then(newName => {\n                var data = {\n                    id: this.$selectedGroup.data('id'),\n                    name: newName\n                };\n\n                Craft.postActionRequest('sites/save-group', data, (response, textStatus) => {\n                    if (textStatus === 'success') {\n                        if (response.success) {\n                            this.$selectedGroup.text(response.group.name);\n                            this.$selectedGroup.data('raw-name', newName);\n                            Craft.cp.displayNotice(Craft.t('app', 'Group renamed.'));\n                        } else if (response.errors) {\n                            var errors = this.flattenErrors(response.errors);\n                            alert(Craft.t('app', 'Could not rename the group:') + \"\\n\\n\" + errors.join(\"\\n\"));\n                        } else {\n                            Craft.cp.displayError();\n                        }\n                    }\n                });\n            }).catch(() => {});\n        },\n\n        promptForGroupName: function(oldName) {\n            return new Promise((resolve, reject) => {\n                Craft.sendActionRequest('POST', 'sites/rename-group-field', {\n                    data: {name: oldName},\n                }).then(response => {\n                    let $form = $('<form/>', {class: 'modal prompt'}).appendTo(Garnish.$bod);\n                    let $body = $('<div/>', {class: 'body'}).append(response.data.html).appendTo($form);\n                    let $buttons = $('<div/>', {class: 'buttons right'}).appendTo($body);\n                    let $cancelBtn = $('<button/>', {type: 'button', class: 'btn', text: Craft.t('app', 'Cancel')}).appendTo($buttons);\n                    let $saveBtn = $('<button/>', {type: 'submit', class: 'btn submit', text: Craft.t('app', 'Save')}).appendTo($buttons);\n\n                    Craft.appendFootHtml(response.data.js);\n\n                    let success = false;\n                    let modal = new Garnish.Modal($form, {\n                        onShow: () => {\n                            setTimeout(() => {\n                                Craft.setFocusWithin($body);\n                            }, 100);\n                        },\n                        onHide: () => {\n                            if (!success) {\n                                reject();\n                            }\n                        },\n                    });\n\n                    $form.on('submit', ev => {\n                        ev.preventDefault();\n                        let newName = $('.text', $body).val();\n                        if (newName && newName !== oldName) {\n                            resolve(newName);\n                            success = true;\n                        }\n                        modal.hide();\n                    });\n\n                    $cancelBtn.on('click', () => {\n                        modal.hide();\n                    });\n                });\n            });\n        },\n\n        deleteSelectedGroup: function() {\n            if (confirm(Craft.t('app', 'Are you sure you want to delete this group?'))) {\n                var data = {\n                    id: this.$selectedGroup.data('id')\n                };\n\n                Craft.postActionRequest('sites/delete-group', data, (response, textStatus) => {\n                    if (textStatus === 'success') {\n                        if (response.success) {\n                            location.href = Craft.getUrl('settings/sites');\n                        } else {\n                            Craft.cp.displayError();\n                        }\n                    }\n                });\n            }\n        },\n\n        flattenErrors: function(responseErrors) {\n            var errors = [];\n\n            for (var attribute in responseErrors) {\n                if (!responseErrors.hasOwnProperty(attribute)) {\n                    continue;\n                }\n\n                errors = errors.concat(responseErrors[attribute]);\n            }\n\n            return errors;\n        }\n    });\n\n    Craft.SiteAdminTable = Craft.AdminTable.extend({\n        confirmDeleteModal: null,\n\n        $rowToDelete: null,\n        $deleteActionRadios: null,\n        $deleteSubmitBtn: null,\n        $deleteSpinner: null,\n\n        _deleting: false,\n\n        confirmDeleteItem: function($row) {\n            if (this.confirmDeleteModal) {\n                this.confirmDeleteModal.destroy();\n                delete this.confirmDeleteModal;\n            }\n\n            this._createConfirmDeleteModal($row);\n\n            // Auto-focus the first radio\n            if (!Garnish.isMobileBrowser(true)) {\n                setTimeout(() => {\n                    this.$deleteActionRadios.first().trigger('focus');\n                }, 100);\n            }\n\n            return false;\n        },\n\n        validateDeleteInputs: function() {\n            var validates = (\n                this.$deleteActionRadios.eq(0).prop('checked') ||\n                this.$deleteActionRadios.eq(1).prop('checked')\n            );\n\n            if (validates) {\n                this.$deleteSubmitBtn.removeClass('disabled');\n            } else {\n                this.$deleteSubmitBtn.addClass('disabled');\n            }\n\n            return validates;\n        },\n\n        submitDeleteLocale: function(ev) {\n            ev.preventDefault();\n\n            if (this._deleting || !this.validateDeleteInputs()) {\n                return;\n            }\n\n            this.$deleteSubmitBtn.addClass('active');\n            this.$deleteSpinner.removeClass('hidden');\n            this.disable();\n            this._deleting = true;\n\n            var data = {\n                id: this.getItemId(this.$rowToDelete)\n            };\n\n            // Are we transferring content?\n            if (this.$deleteActionRadios.eq(0).prop('checked')) {\n                data.transferContentTo = this.$transferSelect.val();\n            }\n\n            Craft.postActionRequest(this.settings.deleteAction, data, (response, textStatus) => {\n                if (textStatus === 'success') {\n                    this._deleting = false;\n                    this.enable();\n                    this.confirmDeleteModal.hide();\n                    this.handleDeleteItemResponse(response, this.$rowToDelete);\n                }\n            });\n        },\n\n        _createConfirmDeleteModal: function($row) {\n            this.$rowToDelete = $row;\n\n            let id = this.getItemId($row);\n            let name = this.getItemName($row);\n\n            let $form = $(\n                '<form id=\"confirmdeletemodal\" class=\"modal fitted\" method=\"post\" accept-charset=\"UTF-8\">' +\n                Craft.getCsrfInput() +\n                '<input type=\"hidden\" name=\"action\" value=\"localization/deleteLocale\"/>' +\n                '<input type=\"hidden\" name=\"id\" value=\"' + id + '\"/>' +\n                '</form>'\n            ).appendTo(Garnish.$bod);\n            let $body = $(\n                '<div class=\"body\">' +\n                '<p>' + Craft.t('app', 'What do you want to do with any content that is only available in {language}?', {language: name}) + '</p>' +\n                '<div class=\"options\">' +\n                '<label><input type=\"radio\" name=\"contentAction\" value=\"transfer\"/> ' + Craft.t('app', 'Transfer it to:') + '</label> ' +\n                '<div id=\"transferselect\" class=\"select\">' +\n                '<select/>' +\n                '</div>' +\n                '</div>' +\n                '<div>' +\n                '<label><input type=\"radio\" name=\"contentAction\" value=\"delete\"/> ' + Craft.t('app', 'Delete it') + '</label>' +\n                '</div>' +\n                '</div>'\n            ).appendTo($form);\n            let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n            let $cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Cancel'),\n            }).appendTo($buttons);\n\n            this.$deleteActionRadios = $body.find('input[type=radio]');\n            this.$transferSelect = $('#transferselect').find('> select');\n            this.$deleteSubmitBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Delete {site}', {site: name}),\n            }).appendTo($buttons);\n            this.$deleteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($buttons);\n\n            for (var i = 0; i < Craft.sites.length; i++) {\n                if (Craft.sites[i].id != id) {\n                    this.$transferSelect.append('<option value=\"' + Craft.sites[i].id + '\">' + Craft.escapeHtml(Craft.sites[i].name) + '</option>');\n                }\n            }\n\n            this.confirmDeleteModal = new Garnish.Modal($form);\n\n            this.addListener($cancelBtn, 'click', function() {\n                this.confirmDeleteModal.hide();\n            });\n\n            this.addListener(this.$deleteActionRadios, 'change', 'validateDeleteInputs');\n            this.addListener($form, 'submit', 'submitDeleteLocale');\n        }\n    });\n})(jQuery);\n"],"names":["$","jQuery","Craft","SitesAdmin","Garnish","Base","extend","$groups","$selectedGroup","init","this","find","addListener","$groupSettingsBtn","length","data","settings","onOptionSelect","elem","$elem","hasClass","renameSelectedGroup","deleteSelectedGroup","addNewGroup","promptForGroupName","then","name","postActionRequest","response","textStatus","success","location","href","getUrl","groupId","group","id","errors","flattenErrors","alert","t","join","cp","displayError","newName","text","displayNotice","oldName","Promise","resolve","reject","sendActionRequest","$form","class","appendTo","$bod","$body","append","html","$buttons","$cancelBtn","type","appendFootHtml","js","modal","Modal","onShow","setTimeout","setFocusWithin","onHide","on","ev","preventDefault","val","hide","confirm","responseErrors","attribute","hasOwnProperty","concat","SiteAdminTable","AdminTable","confirmDeleteModal","$rowToDelete","$deleteActionRadios","$deleteSubmitBtn","$deleteSpinner","_deleting","confirmDeleteItem","$row","destroy","_createConfirmDeleteModal","isMobileBrowser","first","trigger","validateDeleteInputs","validates","eq","prop","removeClass","addClass","submitDeleteLocale","disable","getItemId","transferContentTo","$transferSelect","deleteAction","enable","handleDeleteItemResponse","getItemName","getCsrfInput","language","site","i","sites","escapeHtml"],"sourceRoot":""}