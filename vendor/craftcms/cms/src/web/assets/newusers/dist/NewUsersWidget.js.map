{"version":3,"file":"NewUsersWidget.js","mappings":"YAAA,IAAUA,EAAAA,EA2HPC,OAxHCC,MAAMC,eAAiBC,QAAQC,KAAKC,OAAO,CACvCC,SAAU,KACVC,KAAM,KACNC,UAAW,KACXC,QAAS,KAETC,QAAS,KACTC,MAAO,KAEPC,KAAM,SAASC,EAAUP,GAAU,WAU/B,OATAQ,KAAKC,YAAYT,GAEjBQ,KAAKJ,QAAUX,EAAE,UAAYc,GAC7BC,KAAKH,MAAQG,KAAKJ,QAAQM,KAAK,eAC/BF,KAAKG,gBAAkBlB,EAAE,oCAAoCmB,SAASJ,KAAKH,OAC3EG,KAAKK,OAASpB,EAAE,wBAAwBmB,SAASJ,KAAKH,OAEtCG,KAAKR,SAASc,WAG1B,IAAK,KACDN,KAAKN,UAAYP,MAAMC,eAAemB,cAAc,GACpDP,KAAKL,QAAU,IAAIa,KACnB,MAEJ,IAAK,MACDR,KAAKN,UAAYP,MAAMC,eAAemB,cAAc,IACpDP,KAAKL,QAAU,IAAIa,KACnB,MAEJ,IAAK,WACDR,KAAKN,UAAYP,MAAMC,eAAemB,cAAc,IACpDP,KAAKL,QAAUR,MAAMC,eAAemB,cAAc,GAClD,MAEJ,IAAK,YACDP,KAAKN,UAAYP,MAAMC,eAAemB,cAAc,IACpDP,KAAKL,QAAUR,MAAMC,eAAemB,cAAc,IAK1D,IAAIE,EAAc,CACdf,UAAWP,MAAMC,eAAesB,aAAaV,KAAKN,WAClDC,QAASR,MAAMC,eAAesB,aAAaV,KAAKL,SAChDgB,YAAaX,KAAKR,SAASmB,aAG/BxB,MAAMyB,kBAAkB,4BAA6BH,GAAa,SAACI,EAAUC,GACzE,GAAmB,YAAfA,QAAwD,IAApBD,EAASE,MAAwB,CACrE,EAAKZ,gBAAgBa,YAAY,UAGjC,EAAKC,MAAQ,IAAI9B,MAAM+B,OAAOC,KAAK,EAAKhB,gBAAiB,CACrDiB,MAAO,CACHC,UAAW,SAASJ,GAChB,OAAO,SAASK,GACZ,IAAIC,EAAS,OAMb,OAJID,GAAKE,KAAKC,MAAMH,KAChBC,EAAS,QAGNN,EAAMS,aAAaH,OAAOA,EAA1BN,CAAkCK,QAMzD,IAAIK,EAAiB,IAAIxC,MAAM+B,OAAOU,UAAUf,EAASgB,WAErDC,EAAgB,CAChBC,YAAalB,EAASkB,YACtBC,UAAWnB,EAASoB,MACpBC,QAASrB,EAASqB,SAGtB,EAAKjB,MAAMkB,KAAKR,EAAgBG,GAGhCM,OAAOC,UAAUC,KAAKC,GAAG,cAAe,EAAKC,kBAAkBC,KAAK,QACjE,CAEH,IAAIC,EAAMvD,MAAMwD,EAAE,iCAEQ,IAAd9B,GAA6BA,QAAwC,IAApBA,EAASE,QAClE2B,EAAM7B,EAASE,OAGnB,EAAKV,OAAOuC,KAAKF,GACjB,EAAKrC,OAAOW,YAAY,cAIhChB,KAAKJ,QAAQH,KAAK,UAAU8C,GAAG,UAAWvC,KAAK6C,QAAQJ,KAAKzC,OAE5Db,MAAMC,eAAe0D,UAAUC,KAAK/C,OAGxCwC,kBAAmB,WACfxC,KAAKiB,MAAM+B,UAGfH,QAAS,WACL1D,MAAMC,eAAe0D,UAAUG,OAAOhE,EAAEiE,QAAQlD,KAAMb,MAAMC,eAAe0D,WAAY,GACvF9C,KAAKmD,SAEV,CACCL,UAAW,GAEXvC,cAAe,SAAS6C,GACpB,IAAIC,EAAO,IAAI7C,KAEf,OADA6C,EAAOA,EAAKC,UAAa,MAAeF,EAAO,IACxC,IAAI5C,KAAK6C,IAGpB3C,aAAc,SAAS2C,GACnB,OAAO7B,KAAK+B,MAAMF,EAAKC,UAAY,Q","sources":["webpack:///./NewUsersWidget.js"],"sourcesContent":["(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    Craft.NewUsersWidget = Garnish.Base.extend({\n        settings: null,\n        data: null,\n        startDate: null,\n        endDate: null,\n\n        $widget: null,\n        $body: null,\n\n        init: function(widgetId, settings) {\n            this.setSettings(settings);\n\n            this.$widget = $('#widget' + widgetId);\n            this.$body = this.$widget.find('.body:first');\n            this.$chartContainer = $('<div class=\"chart hidden\"></div>').appendTo(this.$body);\n            this.$error = $('<div class=\"error\"/>').appendTo(this.$body);\n\n            var dateRange = this.settings.dateRange;\n\n            switch (dateRange) {\n                case 'd7':\n                    this.startDate = Craft.NewUsersWidget.getDateByDays(6);\n                    this.endDate = new Date();\n                    break;\n\n                case 'd30':\n                    this.startDate = Craft.NewUsersWidget.getDateByDays(30);\n                    this.endDate = new Date();\n                    break;\n\n                case 'lastweek':\n                    this.startDate = Craft.NewUsersWidget.getDateByDays(13);\n                    this.endDate = Craft.NewUsersWidget.getDateByDays(7);\n                    break;\n\n                case 'lastmonth':\n                    this.startDate = Craft.NewUsersWidget.getDateByDays(60);\n                    this.endDate = Craft.NewUsersWidget.getDateByDays(30);\n                    break;\n            }\n\n            // Request orders report\n            var requestData = {\n                startDate: Craft.NewUsersWidget.getDateValue(this.startDate),\n                endDate: Craft.NewUsersWidget.getDateValue(this.endDate),\n                userGroupId: this.settings.userGroupId\n            };\n\n            Craft.postActionRequest('charts/get-new-users-data', requestData, (response, textStatus) => {\n                if (textStatus === 'success' && typeof (response.error) === 'undefined') {\n                    this.$chartContainer.removeClass('hidden');\n\n                    // Create chart\n                    this.chart = new Craft.charts.Area(this.$chartContainer, {\n                        yAxis: {\n                            formatter: function(chart) {\n                                return function(d) {\n                                    var format = ',.0f';\n\n                                    if (d != Math.round(d)) {\n                                        format = ',.1f';\n                                    }\n\n                                    return chart.formatLocale.format(format)(d);\n                                };\n                            }\n                        }\n                    });\n\n                    var chartDataTable = new Craft.charts.DataTable(response.dataTable);\n\n                    var chartSettings = {\n                        orientation: response.orientation,\n                        dataScale: response.scale,\n                        formats: response.formats\n                    };\n\n                    this.chart.draw(chartDataTable, chartSettings);\n\n                    // Resize chart when grid is refreshed\n                    window.dashboard.grid.on('refreshCols', this.handleGridRefresh.bind(this));\n                } else {\n                    // Error\n                    var msg = Craft.t('A server error occurred.');\n\n                    if (typeof (response) !== 'undefined' && response && typeof (response.error) !== 'undefined') {\n                        msg = response.error;\n                    }\n\n                    this.$error.html(msg);\n                    this.$error.removeClass('hidden');\n                }\n            });\n\n            this.$widget.data('widget').on('destroy', this.destroy.bind(this));\n\n            Craft.NewUsersWidget.instances.push(this);\n        },\n\n        handleGridRefresh: function() {\n            this.chart.resize();\n        },\n\n        destroy: function() {\n            Craft.NewUsersWidget.instances.splice($.inArray(this, Craft.NewUsersWidget.instances), 1);\n            this.base();\n        }\n    }, {\n        instances: [],\n\n        getDateByDays: function(days) {\n            var date = new Date();\n            date = date.getTime() - (60 * 60 * 24 * days * 1000);\n            return new Date(date);\n        },\n\n        getDateValue: function(date) {\n            return Math.floor(date.getTime() / 1000);\n        }\n    });\n})(jQuery);\n"],"names":["$","jQuery","Craft","NewUsersWidget","Garnish","Base","extend","settings","data","startDate","endDate","$widget","$body","init","widgetId","this","setSettings","find","$chartContainer","appendTo","$error","dateRange","getDateByDays","Date","requestData","getDateValue","userGroupId","postActionRequest","response","textStatus","error","removeClass","chart","charts","Area","yAxis","formatter","d","format","Math","round","formatLocale","chartDataTable","DataTable","dataTable","chartSettings","orientation","dataScale","scale","formats","draw","window","dashboard","grid","on","handleGridRefresh","bind","msg","t","html","destroy","instances","push","resize","splice","inArray","base","days","date","getTime","floor"],"sourceRoot":""}