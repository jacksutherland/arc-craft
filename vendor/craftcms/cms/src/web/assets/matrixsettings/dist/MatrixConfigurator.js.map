{"version":3,"file":"MatrixConfigurator.js","mappings":"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","sources":["webpack:///./MatrixConfigurator.js"],"sourcesContent":["(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Matrix configurator class\n     */\n    Craft.MatrixConfigurator = Garnish.Base.extend({\n        fieldTypeInfo: null,\n\n        inputNamePrefix: null,\n        fieldTypeSettingsNamespace: null,\n        inputIdPrefix: null,\n        placeholderKey: null,\n\n        $container: null,\n\n        $blockTypesColumnContainer: null,\n        $fieldsColumnContainer: null,\n        $fieldSettingsColumnContainer: null,\n\n        $blockTypeItemsOuterContainer: null,\n        $blockTypeItemsContainer: null,\n        $fieldItemsContainer: null,\n        $fieldSettingItemsContainer: null,\n\n        $newBlockTypeBtn: null,\n        $newFieldBtn: null,\n\n        blockTypes: null,\n        selectedBlockType: null,\n        blockTypeSort: null,\n        totalNewBlockTypes: 0,\n\n        _fieldTypeSettingsHtml: null,\n        _cancelToken: null,\n        _ignoreFailedRequest: false,\n\n        init: function(fieldTypeInfo, inputNamePrefix, fieldTypeSettingsNamespace, placeholderKey) {\n            this.fieldTypeInfo = fieldTypeInfo;\n            this.inputNamePrefix = inputNamePrefix;\n            this.fieldTypeSettingsNamespace = fieldTypeSettingsNamespace;\n            this.inputIdPrefix = Craft.formatInputId(this.inputNamePrefix);\n            this.placeholderKey = placeholderKey;\n\n            this.$container = $('#' + this.inputIdPrefix + '-matrix-configurator:first .input:first');\n\n            this.$blockTypesColumnContainer = this.$container.children('.block-types').children();\n            this.$fieldsColumnContainer = this.$container.children('.mc-fields').children();\n            this.$fieldSettingsColumnContainer = this.$container.children('.mc-field-settings').children();\n\n            this.$blockTypeItemsOuterContainer = this.$blockTypesColumnContainer.children('.mc-col-items');\n            this.$blockTypeItemsContainer = this.$blockTypeItemsOuterContainer.children('.mc-blocktypes');\n            this.$fieldItemsOuterContainer = this.$fieldsColumnContainer.children('.mc-col-items');\n            this.$fieldSettingItemsContainer = this.$fieldSettingsColumnContainer.children('.mc-col-items');\n\n            this.$newBlockTypeBtn = this.$blockTypeItemsOuterContainer.children('.btn');\n            this.$newFieldBtn = this.$fieldItemsOuterContainer.children('.btn');\n\n            this._fieldTypeSettingsHtml = {};\n\n            // Find the existing block types\n            this.blockTypes = {};\n\n            var $blockTypeItems = this.$blockTypeItemsContainer.children();\n\n            for (var i = 0; i < $blockTypeItems.length; i++) {\n                var $item = $($blockTypeItems[i]),\n                    id = $item.data('id');\n\n                this.blockTypes[id] = new BlockType(this, $item);\n\n                // Is this a new block type?\n                var newMatch = (typeof id === 'string' && id.match(/new(\\d+)/));\n\n                if (newMatch && newMatch[1] > this.totalNewBlockTypes) {\n                    this.totalNewBlockTypes = parseInt(newMatch[1]);\n                }\n            }\n\n            this.blockTypeSort = new Garnish.DragSort($blockTypeItems, {\n                handle: '.move',\n                axis: 'y'\n            });\n\n            this.addListener(this.$newBlockTypeBtn, 'click', 'addBlockType');\n            this.addListener(this.$newFieldBtn, 'click', 'addFieldToSelectedBlockType');\n        },\n\n        getFieldTypeInfo: function(type) {\n            for (var i = 0; i < this.fieldTypeInfo.length; i++) {\n                if (this.fieldTypeInfo[i].type === type) {\n                    return this.fieldTypeInfo[i];\n                }\n            }\n        },\n\n        addBlockType: function() {\n            this.getBlockTypeSettingsModal();\n\n            this.blockTypeSettingsModal.show();\n\n            this.blockTypeSettingsModal.onSubmit = (name, handle) => {\n                this.totalNewBlockTypes++;\n                var id = 'new' + this.totalNewBlockTypes;\n\n                var $item = $(\n                    '<div class=\"matrixconfigitem mci-blocktype\" data-id=\"' + id + '\">' +\n                    '<div class=\"mci-name\">' +\n                    '<h4></h4>' +\n                    '<div class=\"smalltext light code\"></div>' +\n                    '</div>' +\n                    '<a class=\"settings icon\" title=\"' + Craft.t('app', 'Settings') + '\"></a>' +\n                    '<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\"></a>' +\n                    '<input class=\"hidden\" name=\"' + this.inputNamePrefix + '[blockTypes][' + id + '][name]\">' +\n                    '<input class=\"hidden\" name=\"' + this.inputNamePrefix + '[blockTypes][' + id + '][handle]\">' +\n                    '</div>'\n                ).appendTo(this.$blockTypeItemsContainer);\n\n                this.blockTypes[id] = new BlockType(this, $item);\n                this.blockTypes[id].applySettings(name, handle);\n                this.blockTypes[id].select();\n                this.blockTypes[id].addField();\n\n                this.blockTypeSort.addItems($item);\n            };\n        },\n\n        addFieldToSelectedBlockType: function() {\n            if (this.selectedBlockType) {\n                this.selectedBlockType.addField();\n            }\n        },\n\n        getBlockTypeSettingsModal: function() {\n            if (!this.blockTypeSettingsModal) {\n                this.blockTypeSettingsModal = new BlockTypeSettingsModal();\n            }\n\n            return this.blockTypeSettingsModal;\n        },\n\n        getFieldTypeSettingsHtml: function(type) {\n            return new Promise((resolve, reject) => {\n                if (typeof this._fieldTypeSettingsHtml[type] !== 'undefined') {\n                    resolve(this._fieldTypeSettingsHtml[type]);\n                    return;\n                }\n\n                // Cancel the current request\n                if (this._cancelToken) {\n                    this._ignoreFailedRequest = true;\n                    this._cancelToken.cancel();\n                    Garnish.requestAnimationFrame(() => {\n                        this._ignoreFailedRequest = false;\n                    });\n                }\n\n                // Create a cancel token\n                this._cancelToken = axios.CancelToken.source();\n\n                Craft.sendActionRequest('POST', 'fields/render-settings', {\n                    cancelToken: this._cancelToken.token,\n                    data: {\n                        type: type,\n                        namespace: this.fieldTypeSettingsNamespace,\n                    }\n                }).then(response => {\n                    this._fieldTypeSettingsHtml[type] = response.data;\n                    resolve(response.data);\n                }).catch(() => {\n                    if (!this._ignoreFailedRequest) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                    reject();\n                });\n            });\n        },\n    });\n\n    /**\n     * Block type settings modal class\n     */\n    var BlockTypeSettingsModal = Garnish.Modal.extend({\n        init: function() {\n            this.base();\n\n            this.$form = $('<form class=\"modal fitted\"/>').appendTo(Garnish.$bod);\n            this.setContainer(this.$form);\n\n            this.$body = $('<div class=\"body\"/>').appendTo(this.$form);\n            let $nameField = Craft.ui.createTextField({\n                label: Craft.t('app', 'Name'),\n                instructions: Craft.t('app', 'What this block type will be called in the control panel.'),\n            }).appendTo(this.$body);\n            let $nameInputContainer = $nameField.find('.input');\n            this.$nameInput = $nameInputContainer.find('.text');\n            this.$nameErrorList = $('<ul class=\"errors\"/>').appendTo($nameInputContainer).hide();\n            let $handleField = Craft.ui.createTextField({\n                label: Craft.t('app', 'Handle'),\n                instructions: Craft.t('app', 'How you’ll refer to this block type in the templates.'),\n                class: 'code',\n                maxlength: 47,\n            }).appendTo(this.$body);\n            let $handleInputContainer = $handleField.find('.input');\n            this.$handleInput = $handleInputContainer.find('.text');\n            this.$handleErrorList = $('<ul class=\"errors\"/>').appendTo($handleInputContainer).hide();\n            this.$deleteBtn = $('<a class=\"error left hidden\" style=\"line-height: 30px;\">' + Craft.t('app', 'Delete') + '</a>').appendTo(this.$body);\n            this.$buttons = $('<div class=\"buttons right\" style=\"margin-top: 0;\"/>').appendTo(this.$body);\n            this.$cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Cancel'),\n            }).appendTo(this.$buttons);\n            this.$submitBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit',\n            }).appendTo(this.$buttons);\n\n            this.handleGenerator = new Craft.HandleGenerator(this.$nameInput, this.$handleInput);\n\n            this.addListener(this.$cancelBtn, 'click', 'hide');\n            this.addListener(this.$form, 'submit', 'onFormSubmit');\n            this.addListener(this.$deleteBtn, 'click', 'onDeleteClick');\n        },\n\n        onFormSubmit: function(ev) {\n            ev.preventDefault();\n\n            // Prevent multi form submits with the return key\n            if (!this.visible) {\n                return;\n            }\n\n            if (this.handleGenerator.listening) {\n                // Give the handle a chance to catch up with the input\n                this.handleGenerator.updateTarget();\n            }\n\n            // Basic validation\n            var name = Craft.trim(this.$nameInput.val()),\n                handle = Craft.trim(this.$handleInput.val());\n\n            if (!name || !handle) {\n                Garnish.shake(this.$form);\n            } else {\n                this.hide();\n                this.onSubmit(name, handle);\n            }\n        },\n\n        onDeleteClick: function() {\n            if (confirm(Craft.t('app', 'Are you sure you want to delete this block type?'))) {\n                this.hide();\n                this.onDelete();\n            }\n        },\n\n        show: function(name, handle, errors) {\n            this.$nameInput.val(typeof name === 'string' ? name : '');\n            this.$handleInput.val(typeof handle === 'string' ? handle : '');\n\n            if (!handle) {\n                this.handleGenerator.startListening();\n            } else {\n                this.handleGenerator.stopListening();\n            }\n\n            if (typeof name === 'undefined') {\n                this.$deleteBtn.addClass('hidden');\n                this.$submitBtn.text(Craft.t('app', 'Create'));\n            } else {\n                this.$deleteBtn.removeClass('hidden');\n                this.$submitBtn.text(Craft.t('app', 'Apply'));\n            }\n\n            this.displayErrors('name', (errors ? errors.name : null));\n            this.displayErrors('handle', (errors ? errors.handle : null));\n\n            if (!Garnish.isMobileBrowser()) {\n                setTimeout(() => {\n                    this.$nameInput.trigger('focus');\n                }, 100);\n            }\n\n            this.base();\n        },\n\n        displayErrors: function(attr, errors) {\n            var $input = this['$' + attr + 'Input'],\n                $errorList = this['$' + attr + 'ErrorList'];\n\n            $errorList.children().remove();\n\n            if (errors) {\n                $input.addClass('error');\n                $errorList.show();\n\n                for (var i = 0; i < errors.length; i++) {\n                    $('<li/>').text(errors[i]).appendTo($errorList);\n                }\n            } else {\n                $input.removeClass('error');\n                $errorList.hide();\n            }\n        }\n    });\n\n    /**\n     * Block type class\n     */\n    var BlockType = Garnish.Base.extend({\n        configurator: null,\n        id: null,\n        errors: null,\n\n        inputNamePrefix: null,\n        inputIdPrefix: null,\n\n        $item: null,\n        $nameLabel: null,\n        $handleLabel: null,\n        $nameHiddenInput: null,\n        $handleHiddenInput: null,\n        $settingsBtn: null,\n        $fieldItemsContainer: null,\n        $fieldSettingsContainer: null,\n\n        fields: null,\n        selectedField: null,\n        fieldSort: null,\n        totalNewFields: 0,\n        fieldSettings: null,\n\n        init: function(configurator, $item) {\n            this.configurator = configurator;\n            this.$item = $item;\n            this.id = this.$item.data('id');\n            this.errors = this.$item.data('errors');\n\n            this.inputNamePrefix = this.configurator.inputNamePrefix + '[blockTypes][' + this.id + ']';\n            this.inputIdPrefix = this.configurator.inputIdPrefix + '-blockTypes-' + this.id;\n\n            let $nameContainer = this.$item.children('.mci-name');\n            this.$nameLabel = $nameContainer.children('h4');\n            this.$handleLabel = $nameContainer.children('.smalltext');\n            this.$nameHiddenInput = this.$item.find('input[name$=\"[name]\"]:first');\n            this.$handleHiddenInput = this.$item.find('input[name$=\"[handle]\"]:first');\n            this.$settingsBtn = this.$item.find('.settings');\n\n            // Find the field items container if it exists, otherwise create it\n            this.$fieldItemsContainer = this.configurator.$fieldItemsOuterContainer.children('[data-id=\"' + this.id + '\"]:first');\n\n            if (!this.$fieldItemsContainer.length) {\n                this.$fieldItemsContainer = $('<div data-id=\"' + this.id + '\"/>').insertBefore(this.configurator.$newFieldBtn);\n            }\n\n            // Find the field settings container if it exists, otherwise create it\n            this.$fieldSettingsContainer = this.configurator.$fieldSettingItemsContainer.children('[data-id=\"' + this.id + '\"]:first');\n\n            if (!this.$fieldSettingsContainer.length) {\n                this.$fieldSettingsContainer = $('<div data-id=\"' + this.id + '\"/>').appendTo(this.configurator.$fieldSettingItemsContainer);\n            }\n\n            // Find the existing fields\n            this.fields = {};\n\n            var $fieldItems = this.$fieldItemsContainer.children();\n\n            for (var i = 0; i < $fieldItems.length; i++) {\n                var $fieldItem = $($fieldItems[i]),\n                    id = $fieldItem.data('id');\n\n                this.fields[id] = new Field(this.configurator, this, $fieldItem);\n\n                // Is this a new field?\n                var newMatch = (typeof id === 'string' && id.match(/new(\\d+)/));\n\n                if (newMatch && newMatch[1] > this.totalNewFields) {\n                    this.totalNewFields = parseInt(newMatch[1]);\n                }\n            }\n\n            this.addListener(this.$item, 'click', 'select');\n            this.addListener(this.$settingsBtn, 'click', 'showSettings');\n\n            this.fieldSort = new Garnish.DragSort($fieldItems, {\n                handle: '.move',\n                axis: 'y',\n                onSortChange: () => {\n                    // Adjust the field setting containers to match the new sort order\n                    for (var i = 0; i < this.fieldSort.$items.length; i++) {\n                        var $item = $(this.fieldSort.$items[i]),\n                            id = $item.data('id'),\n                            field = this.fields[id];\n\n                        field.$fieldSettingsContainer.appendTo(this.$fieldSettingsContainer);\n                    }\n                },\n            });\n        },\n\n        select: function() {\n            if (this.configurator.selectedBlockType === this) {\n                return;\n            }\n\n            if (this.configurator.selectedBlockType) {\n                this.configurator.selectedBlockType.deselect();\n            }\n\n            this.configurator.$fieldsColumnContainer.removeClass('hidden');\n            this.$fieldItemsContainer.removeClass('hidden');\n            this.$item.addClass('sel');\n            this.configurator.selectedBlockType = this;\n            Garnish.$win.trigger('resize');\n        },\n\n        deselect: function() {\n            this.$item.removeClass('sel');\n            this.configurator.$fieldsColumnContainer.addClass('hidden');\n            this.$fieldItemsContainer.addClass('hidden');\n            this.$fieldSettingsContainer.addClass('hidden');\n            this.configurator.selectedBlockType = null;\n\n            if (this.selectedField) {\n                this.selectedField.deselect();\n            }\n\n            Garnish.$win.trigger('resize');\n        },\n\n        showSettings: function() {\n            var blockTypeSettingsModal = this.configurator.getBlockTypeSettingsModal();\n            blockTypeSettingsModal.show(this.$nameHiddenInput.val(), this.$handleHiddenInput.val(), this.errors);\n            blockTypeSettingsModal.onSubmit = this.applySettings.bind(this);\n            blockTypeSettingsModal.onDelete = this.selfDestruct.bind(this);\n        },\n\n        applySettings: function(name, handle) {\n            if (this.errors) {\n                this.errors = null;\n                this.$settingsBtn.removeClass('error');\n            }\n\n            this.$nameLabel.text(name);\n            this.$handleLabel.text(handle);\n            this.$nameHiddenInput.val(name);\n            this.$handleHiddenInput.val(handle);\n        },\n\n        addField: function() {\n            this.totalNewFields++;\n            var id = 'new' + this.totalNewFields;\n\n            var $item = $(\n                '<div class=\"matrixconfigitem mci-field\" data-id=\"' + id + '\">' +\n                '<div class=\"mci-name\">' +\n                '<h4><em class=\"light\">' + Craft.t('app', '(blank)') + '</em></h4>' +\n                '<div class=\"smalltext light code\"></div>' +\n                '</div>' +\n                '<div class=\"actions\">' +\n                '<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\"></a>' +\n                '</div>' +\n                '</div>'\n            ).appendTo(this.$fieldItemsContainer);\n\n            this.fields[id] = new Field(this.configurator, this, $item);\n            this.fields[id].select();\n\n            this.fieldSort.addItems($item);\n        },\n\n        selfDestruct: function() {\n            this.deselect();\n            this.$item.remove();\n            this.$fieldItemsContainer.remove();\n            this.$fieldSettingsContainer.remove();\n\n            this.configurator.blockTypes[this.id] = null;\n            delete this.configurator.blockTypes[this.id];\n        }\n    });\n\n    var Field = Garnish.Base.extend({\n        configurator: null,\n        blockType: null,\n        id: null,\n\n        inputNamePrefix: null,\n        inputIdPrefix: null,\n\n        selectedFieldType: null,\n        initializedFieldTypeSettings: null,\n\n        $item: null,\n        $nameLabel: null,\n        $handleLabel: null,\n\n        $fieldSettingsContainer: null,\n        $nameInput: null,\n        $handleInput: null,\n        $requiredCheckbox: null,\n        $typeSelect: null,\n        $translationSettingsContainer: null,\n        $typeSettingsContainer: null,\n        $widthInput: null,\n        $deleteBtn: null,\n\n        init: function(configurator, blockType, $item) {\n            this.configurator = configurator;\n            this.blockType = blockType;\n            this.$item = $item;\n            this.id = this.$item.data('id');\n\n            this.inputNamePrefix = this.blockType.inputNamePrefix + '[fields][' + this.id + ']';\n            this.inputIdPrefix = this.blockType.inputIdPrefix + '-fields-' + this.id;\n\n            this.initializedFieldTypeSettings = {};\n            this.fieldTypeSettingsTemplates = {};\n\n            let $nameContainer = this.$item.children('.mci-name');\n            this.$nameLabel = $nameContainer.children('h4');\n            this.$handleLabel = $nameContainer.children('.smalltext');\n\n            // Find the field settings container if it exists, otherwise create it\n            this.$fieldSettingsContainer = this.blockType.$fieldSettingsContainer.children('[data-id=\"' + this.id + '\"]:first');\n\n            var isNew = (!this.$fieldSettingsContainer.length);\n\n            if (isNew) {\n                this.$fieldSettingsContainer = this.getDefaultFieldSettings().appendTo(this.blockType.$fieldSettingsContainer);\n            }\n\n            this.$nameInput = $('#' + this.inputIdPrefix + '-name');\n            this.$handleInput = $('#' + this.inputIdPrefix + '-handle');\n            this.$requiredCheckbox = $('#' + this.inputIdPrefix + '-required');\n            this.$typeSelect = $('#' + this.inputIdPrefix + '-type');\n            this.$translationSettingsContainer = $('#' + this.inputIdPrefix + '-translation-settings');\n            this.$typeSettingsContainer = this.$fieldSettingsContainer.children('.mc-fieldtype-settings:first');\n            this.$widthInput = $('#' + this.inputIdPrefix + '-width');\n            this.$deleteBtn = this.$fieldSettingsContainer.children('a.delete:first');\n\n            if (isNew) {\n                this.setFieldType('craft\\\\fields\\\\PlainText');\n            } else {\n                this.selectedFieldType = this.$typeSelect.val();\n                this.initializedFieldTypeSettings[this.selectedFieldType] = this.$typeSettingsContainer.children();\n            }\n\n            if (!this.$handleInput.val()) {\n                new Craft.HandleGenerator(this.$nameInput, this.$handleInput);\n            }\n\n            this.addListener(this.$item, 'click', 'select');\n            this.addListener(this.$nameInput, 'input', 'updateNameLabel');\n            this.addListener(this.$handleInput, 'input', 'updateHandleLabel');\n            this.addListener(this.$requiredCheckbox, 'change', 'updateRequiredIcon');\n            this.addListener(this.$typeSelect, 'change', 'onTypeSelectChange');\n            this.addListener(this.$deleteBtn, 'click', 'confirmDelete');\n\n            let widthSlider = new Craft.SlidePicker(this.$widthInput.val() || 100, {\n                min: 25,\n                max: 100,\n                step: 25,\n                valueLabel: width => {\n                    return Craft.t('app', '{pct} width', {pct: `${width}%`});\n                },\n                onChange: width => {\n                    this.$widthInput.val(width);\n                }\n            });\n            widthSlider.$container.insertAfter($nameContainer);\n        },\n\n        select: function() {\n            if (this.blockType.selectedField === this) {\n                return;\n            }\n\n            if (this.blockType.selectedField) {\n                this.blockType.selectedField.deselect();\n            }\n\n            this.configurator.$fieldSettingsColumnContainer.removeClass('hidden');\n            this.blockType.$fieldSettingsContainer.removeClass('hidden');\n            this.$fieldSettingsContainer.removeClass('hidden');\n            this.$item.addClass('sel');\n            this.blockType.selectedField = this;\n            Garnish.$win.trigger('resize');\n\n            if (!Garnish.isMobileBrowser()) {\n                setTimeout(() => {\n                    this.$nameInput.trigger('focus');\n                }, 100);\n            }\n        },\n\n        deselect: function() {\n            this.$item.removeClass('sel');\n            this.configurator.$fieldSettingsColumnContainer.addClass('hidden');\n            this.blockType.$fieldSettingsContainer.addClass('hidden');\n            this.$fieldSettingsContainer.addClass('hidden');\n            this.blockType.selectedField = null;\n            Garnish.$win.trigger('resize');\n        },\n\n        updateNameLabel: function() {\n            var val = this.$nameInput.val();\n            this.$nameLabel.html((val ? Craft.escapeHtml(val) : '<em class=\"light\">' + Craft.t('app', '(blank)') + '</em>'));\n        },\n\n        updateHandleLabel: function() {\n            this.$handleLabel.html(Craft.escapeHtml(this.$handleInput.val()));\n        },\n\n        updateRequiredIcon: function() {\n            if (this.$requiredCheckbox.prop('checked')) {\n                this.$nameLabel.addClass('mci-required');\n            } else {\n                this.$nameLabel.removeClass('mci-required');\n            }\n        },\n\n        onTypeSelectChange: function() {\n            this.setFieldType(this.$typeSelect.val());\n        },\n\n        setFieldType: function(type) {\n            // Update the Translation Method settings\n            Craft.updateTranslationMethodSettings(type, this.$translationSettingsContainer);\n\n            if (this.selectedFieldType) {\n                this.initializedFieldTypeSettings[this.selectedFieldType].detach();\n            }\n\n            this.selectedFieldType = type;\n            this.$typeSelect.val(type);\n\n            // Show a spinner\n            this.$typeSettingsContainer.html('<div class=\"zilch\"><div class=\"spinner\"></div></div>');\n\n            this.getFieldTypeSettings(type).then(({fresh, $settings, headHtml, footHtml}) => {\n                this.$typeSettingsContainer.html('').append($settings);\n                if (fresh) {\n                    Craft.initUiElements($settings);\n                    Craft.appendHeadHtml(headHtml);\n                    Craft.appendFootHtml(footHtml);\n                }\n\n                Garnish.$win.trigger('resize');\n            }).catch(() => {\n                this.$typeSettingsContainer.html('');\n            });\n        },\n\n        getFieldTypeSettings: function(type) {\n            return new Promise((resolve, reject) => {\n                if (typeof this.initializedFieldTypeSettings[type] !== 'undefined') {\n                    resolve({\n                        fresh: false,\n                        $settings: this.initializedFieldTypeSettings[type],\n                    });\n                    return;\n                }\n\n                this.configurator.getFieldTypeSettingsHtml(type).then(({settingsHtml, headHtml, footHtml}) => {\n                    settingsHtml = this.getParsedFieldTypeHtml(settingsHtml);\n                    headHtml = this.getParsedFieldTypeHtml(headHtml);\n                    footHtml = this.getParsedFieldTypeHtml(footHtml);\n                    let $settings = $('<div/>').html(settingsHtml);\n                    this.initializedFieldTypeSettings[type] = $settings;\n                    resolve({\n                        fresh: true,\n                        $settings: $settings,\n                        headHtml: headHtml,\n                        footHtml: footHtml,\n                    });\n                }).catch($.noop);\n            });\n        },\n\n        getParsedFieldTypeHtml: function(html) {\n            if (typeof html === 'string') {\n                html = html.replace(new RegExp(`__BLOCK_TYPE_${this.configurator.placeholderKey}__`, 'g'), this.blockType.id);\n                html = html.replace(new RegExp(`__FIELD_${this.configurator.placeholderKey}__`, 'g'), this.id);\n            } else {\n                html = '';\n            }\n\n            return html;\n        },\n\n        getDefaultFieldSettings: function() {\n            var $container = $('<div/>', {\n                'data-id': this.id\n            });\n\n            Craft.ui.createTextField({\n                label: Craft.t('app', 'Name'),\n                id: this.inputIdPrefix + '-name',\n                name: this.inputNamePrefix + '[name]'\n            }).appendTo($container);\n\n            Craft.ui.createTextField({\n                label: Craft.t('app', 'Handle'),\n                id: this.inputIdPrefix + '-handle',\n                'class': 'code',\n                name: this.inputNamePrefix + '[handle]',\n                maxlength: 64,\n                required: true\n            }).appendTo($container);\n\n            Craft.ui.createTextareaField({\n                label: Craft.t('app', 'Instructions'),\n                id: this.inputIdPrefix + '-instructions',\n                'class': 'nicetext',\n                name: this.inputNamePrefix + '[instructions]'\n            }).appendTo($container);\n\n            let $fieldset = $('<fieldset/>').appendTo($container);\n\n            Craft.ui.createCheckboxField({\n                label: Craft.t('app', 'This field is required'),\n                id: this.inputIdPrefix + '-required',\n                name: this.inputNamePrefix + '[required]'\n            }).appendTo($fieldset);\n\n            Craft.ui.createCheckboxField({\n                label: Craft.t('app', 'Use this field’s values as search keywords'),\n                id: this.inputIdPrefix + '-searchable',\n                name: this.inputNamePrefix + '[searchable]',\n                checked: false,\n            }).appendTo($fieldset);\n\n            var fieldTypeOptions = [];\n\n            for (var i = 0; i < this.configurator.fieldTypeInfo.length; i++) {\n                fieldTypeOptions.push({\n                    value: this.configurator.fieldTypeInfo[i].type,\n                    label: this.configurator.fieldTypeInfo[i].name\n                });\n            }\n\n            Craft.ui.createSelectField({\n                label: Craft.t('app', 'Field Type'),\n                id: this.inputIdPrefix + '-type',\n                name: this.inputNamePrefix + '[type]',\n                options: fieldTypeOptions,\n                value: 'craft\\\\fields\\\\PlainText'\n            }).appendTo($container);\n\n            if (Craft.isMultiSite) {\n                var $translationSettingsContainer = $('<div/>', {\n                    id: this.inputIdPrefix + '-translation-settings'\n                }).appendTo($container);\n\n                Craft.ui.createSelectField({\n                    label: Craft.t('app', 'Translation Method'),\n                    id: this.inputIdPrefix + '-translation-method',\n                    name: this.inputNamePrefix + '[translationMethod]',\n                    options: [],\n                    value: 'none',\n                    toggle: true,\n                    targetPrefix: this.inputIdPrefix + '-translation-method-'\n                }).appendTo($translationSettingsContainer);\n\n                var $translationKeyFormatContainer = $('<div/>', {\n                    id: this.inputIdPrefix + '-translation-method-custom',\n                    'class': 'hidden'\n                }).appendTo($translationSettingsContainer);\n\n                Craft.ui.createTextField({\n                    label: Craft.t('app', 'Translation Key Format'),\n                    id: this.inputIdPrefix + '-translation-key-format',\n                    name: this.inputNamePrefix + '[translationKeyFormat]'\n                }).appendTo($translationKeyFormatContainer);\n            }\n\n            $('<hr/>').appendTo($container);\n\n            $('<div/>', {\n                'class': 'mc-fieldtype-settings'\n            }).appendTo($container);\n\n            $('<input/>', {\n                type: 'hidden',\n                id: this.inputIdPrefix + '-width',\n                name: this.inputNamePrefix + '[width]',\n                value: '100',\n            }).appendTo($container);\n\n            $('<hr/>').appendTo($container);\n\n            $('<a/>', {\n                'class': 'error delete',\n                text: Craft.t('app', 'Delete')\n            }).appendTo($container);\n\n            return $container;\n        },\n\n        confirmDelete: function() {\n            if (confirm(Craft.t('app', 'Are you sure you want to delete this field?'))) {\n                this.selfDestruct();\n            }\n        },\n\n        selfDestruct: function() {\n            this.deselect();\n            this.$item.remove();\n            this.$fieldSettingsContainer.remove();\n\n            this.blockType.fields[this.id] = null;\n            delete this.blockType.fields[this.id];\n        }\n    });\n})(jQuery);\n"],"names":["$","Craft","MatrixConfigurator","Garnish","Base","extend","fieldTypeInfo","inputNamePrefix","fieldTypeSettingsNamespace","inputIdPrefix","placeholderKey","$container","$blockTypesColumnContainer","$fieldsColumnContainer","$fieldSettingsColumnContainer","$blockTypeItemsOuterContainer","$blockTypeItemsContainer","$fieldItemsContainer","$fieldSettingItemsContainer","$newBlockTypeBtn","$newFieldBtn","blockTypes","selectedBlockType","blockTypeSort","totalNewBlockTypes","_fieldTypeSettingsHtml","_cancelToken","_ignoreFailedRequest","init","this","formatInputId","children","$fieldItemsOuterContainer","$blockTypeItems","i","length","$item","id","data","BlockType","newMatch","match","parseInt","DragSort","handle","axis","addListener","getFieldTypeInfo","type","addBlockType","getBlockTypeSettingsModal","blockTypeSettingsModal","show","onSubmit","name","t","appendTo","applySettings","select","addField","addItems","addFieldToSelectedBlockType","BlockTypeSettingsModal","getFieldTypeSettingsHtml","Promise","resolve","reject","cancel","requestAnimationFrame","axios","CancelToken","source","sendActionRequest","cancelToken","token","namespace","then","response","cp","displayError","Modal","base","$form","$bod","setContainer","$body","$nameInputContainer","ui","createTextField","label","instructions","find","$nameInput","$nameErrorList","hide","$handleInputContainer","class","maxlength","$handleInput","$handleErrorList","$deleteBtn","$buttons","$cancelBtn","text","$submitBtn","handleGenerator","HandleGenerator","onFormSubmit","ev","preventDefault","visible","listening","updateTarget","trim","val","shake","onDeleteClick","confirm","onDelete","errors","stopListening","startListening","addClass","removeClass","displayErrors","isMobileBrowser","setTimeout","trigger","attr","$input","$errorList","remove","configurator","$nameLabel","$handleLabel","$nameHiddenInput","$handleHiddenInput","$settingsBtn","$fieldSettingsContainer","fields","selectedField","fieldSort","totalNewFields","fieldSettings","$nameContainer","insertBefore","$fieldItems","$fieldItem","Field","onSortChange","$items","deselect","$win","showSettings","bind","selfDestruct","blockType","selectedFieldType","initializedFieldTypeSettings","$requiredCheckbox","$typeSelect","$translationSettingsContainer","$typeSettingsContainer","$widthInput","fieldTypeSettingsTemplates","isNew","getDefaultFieldSettings","setFieldType","SlidePicker","min","max","step","valueLabel","width","pct","onChange","insertAfter","updateNameLabel","html","escapeHtml","updateHandleLabel","updateRequiredIcon","prop","onTypeSelectChange","updateTranslationMethodSettings","detach","getFieldTypeSettings","fresh","$settings","headHtml","footHtml","append","initUiElements","appendHeadHtml","appendFootHtml","settingsHtml","getParsedFieldTypeHtml","noop","replace","RegExp","required","createTextareaField","$fieldset","createCheckboxField","checked","fieldTypeOptions","push","value","createSelectField","options","isMultiSite","toggle","targetPrefix","$translationKeyFormatContainer","confirmDelete","jQuery"],"sourceRoot":""}